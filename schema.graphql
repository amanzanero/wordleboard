# Game State
enum LetterGuess {
  INCORRECT,
  IN_WORD,
  IN_LOCATION
}

type GuessState {
  letter: String!
  guess: LetterGuess!
}

enum GameState {
  IN_PROGRESS,
  LOST,
  WON
}

type GameBoard {
  day: Int!
  guesses: [[GuessState!]!]!
  state: GameState!
}

enum GuessError {
  NotAWord
  InvalidLength
}

type InvalidGuess {
  error: GuessError!
}

union GuessResult = GameBoard | InvalidGuess

# Leaderboard State
type User {
  id: ID!
  displayName: String!
  leaderboards: [Leaderboard!]!
  individualStats: [UserStat!]!
}

input NewUser {
  id: ID!
  displayName: String
}

type UserStat {
  user: User!
  day: Int!
  guesses: [[GuessState!]!]!
  state: GameState!
}

type LeaderboardStat {
  day: Int!
  stats: [UserStat!]!
}

type Leaderboard {
  id: ID!
  name: String!
  members: [User!]!
  stats: [LeaderboardStat!]!
  owner: ID!
}

enum LeaderboardError {
  DoesNotExist
  MaxCapacity
  CouldNotCreate
  NotAuthorized
}

type LeaderboardResultError {
  error: LeaderboardError!
}

union LeaderboardResult = Leaderboard | LeaderboardResultError

type Query {
  day(input: Int!): GameBoard
  todayBoard: GameBoard!
  me: User!
  leaderboard(joinId: ID!): LeaderboardResult!
}

type Mutation {
  guess(input: String!): GuessResult! # guesses only apply to today's board
  createLeaderboard(name: String!): LeaderboardResult!
  joinLeaderboard(id: String!): LeaderboardResult!
}
